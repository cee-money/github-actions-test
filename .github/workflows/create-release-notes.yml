name: CREATE_RELEASE_NOTES
on:
  workflow_call:
    inputs:
      tag:
        description: 'The release tag associated with the release notes'
        default: ''
        required: true
        type: string
    secrets:
      GHE_ACCESS_TOKEN:
        required: true
jobs:
  create_notes:
    runs-on: comcast-runner
    environment: prod
    strategy:
      matrix:
        node-version: [16.x]
    steps:
      - name: "Create notes"
        uses: "actions/github-script@v6"
        with:
          github-token: "${{ secrets.GHE_ACCESS_TOKEN }}"
          script: |
            try {

              const response = await github.rest.repos.createRelease({
                draft: false,
                generate_release_notes: true,
                name: inputs.tag,
                owner: context.repo.owner,
                prerelease: false,
                repo: context.repo.repo,
                tag_name: inputs.tag,
              });

              core.exportVariable('RELEASE_ID', response.data.id);
              core.exportVariable('RELEASE_UPLOAD_URL', response.data.upload_url);

            } catch (error) {
              core.setFailed(error.message);
            }
  
  format_release_notes:
    runs-on: comcast-runner
    needs: [create_notes]
    steps:
      - name: Get notes and set body as var
        id: release
        env:
          URL: https://api.github.com/cee-money/github-actions-test/releases/tags/${{ inputs.tag }}
          GITHUB_TOKEN: ${{ secrets.GHE_ACCESS_TOKEN }}
        run: |
          GET_RELEASE_RESULT=$(curl --header "Accept: application/vnd.github+json" --header "Authorization: Bearer $GITHUB_TOKEN" --header "X-GitHub-Api-Version: 2022-11-28" $URL)
          ID=$(echo ${GET_RELEASE_RESULT} | jq '.id')
          BODY=$(echo ${GET_RELEASE_RESULT} | jq '.body')
          echo "id=${ID}" >> $GITHUB_OUTPUT
          echo "body=${BODY}" >> $GITHUB_OUTPUT

      - name: COPY/PASTE formatted notes with Jira links
        uses: "actions/github-script@v6"
        with:
          script: |
            const body = steps.release.outputs.body
            const arr = body.split('*').map((line) => {
              const regex = /\[THRIVE-\d+]/g
              const matches = line.match(regex)
              if (!matches) {
                return line
              }
              matches.forEach((match) => {
                line = line.replace(
                  match,
                  `${match}(https://ccp.sys.comcast.net/browse/${match.replace(/[\[\]']+/g, '')})`
                )
              })
              return line
            })
            const modifiedBody = arr.join('*')
            console.log('COPY BELOW:', `\n\n${modifiedBody}`)
